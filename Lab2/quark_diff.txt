diff --git a/FemtoRV/RTL/PROCESSOR/femtorv32_quark.v b/FemtoRV/RTL/PROCESSOR/femtorv32_quark.v
index 52705e5..02eca19 100644
--- a/FemtoRV/RTL/PROCESSOR/femtorv32_quark.v
+++ b/FemtoRV/RTL/PROCESSOR/femtorv32_quark.v
@@ -51,6 +51,7 @@ module FemtoRV32(
    parameter RESET_ADDR       = 32'h00000000;
    parameter ADDR_WIDTH       = 24;
 
+   reg tee = 0;
  /***************************************************************************/
  // Instruction decoding.
  /***************************************************************************/
@@ -82,12 +83,12 @@ module FemtoRV32(
    wire isStore   =  (instr[6:2] == 5'b01000); // mem[rs1+Simm] <- rs2
    wire isALUreg  =  (instr[6:2] == 5'b01100); // rd <- rs1 OP rs2
    wire isSYSTEM  =  (instr[6:2] == 5'b11100); // rd <- cycles
-   wire isJAL     =  instr[3]; // (instr[6:2] == 5'b11011); // rd <- PC+4; PC<-PC+Jimm
+   wire isJAL     =  (instr[6:2] == 5'b11011); // rd <- PC+4; PC<-PC+Jimm
    wire isJALR    =  (instr[6:2] == 5'b11001); // rd <- PC+4; PC<-rs1+Iimm
    wire isLUI     =  (instr[6:2] == 5'b01101); // rd <- Uimm
    wire isAUIPC   =  (instr[6:2] == 5'b00101); // rd <- PC + Uimm
    wire isBranch  =  (instr[6:2] == 5'b11000); // if(rs1 OP rs2) PC<-PC+Bimm
-
+   wire isTEE     =  (instr[6:2] == 5'b00111);
    wire isALU = isALUimm | isALUreg;
 
    /***************************************************************************/
@@ -116,7 +117,7 @@ module FemtoRV32(
    // Second ALU source, depends on opcode:
    //    ALUreg, Branch:     rs2
    //    ALUimm, Load, JALR: Iimm
-   wire [31:0] aluIn2 = isALUreg | isBranch ? rs2 : Iimm;
+   wire [31:0] aluIn2 = isALUreg | isBranch | isTEE ? rs2 : Iimm;
 
    reg  [31:0] aluReg;       // The internal register of the ALU, used by shift.
    reg  [4:0]  aluShamt;     // Current shift amount.
@@ -215,9 +216,11 @@ module FemtoRV32(
    /* verilator lint_off WIDTH */
    // internal address registers and cycles counter may have less than 
    // 32 bits, so we deactivate width test for mem_addr and writeBackData
-
-   assign mem_addr = state[WAIT_INSTR_bit] | state[FETCH_INSTR_bit] ?
-		     PC : loadstore_addr ;
+   wire mem_address_is_tee;
+   assign mem_address_is_tee = loadstore_addr[21] && loadstore_addr[20]; // 0x300000
+   assign mem_addr = (state[WAIT_INSTR_bit] | state[FETCH_INSTR_bit]) ?
+                  PC :
+                  ((mem_address_is_tee && !tee) ? 32'h400004 : loadstore_addr);
 
    /***************************************************************************/
    // The value written back to the register file.
@@ -266,7 +269,7 @@ module FemtoRV32(
 
    // STORE
 
-   assign mem_wdata[ 7: 0] = rs2[7:0];
+   assign mem_wdata[ 7: 0] = (mem_address_is_tee && !tee)? 8'b0111  : rs2[7:0];
    assign mem_wdata[15: 8] = loadstore_addr[0] ? rs2[7:0]  : rs2[15: 8];
    assign mem_wdata[23:16] = loadstore_addr[1] ? rs2[7:0]  : rs2[23:16];
    assign mem_wdata[31:24] = loadstore_addr[0] ? rs2[7:0]  :
@@ -336,6 +339,7 @@ module FemtoRV32(
       if(!reset) begin
          state      <= WAIT_ALU_OR_MEM; // Just waiting for !mem_wbusy
          PC         <= RESET_ADDR[ADDR_WIDTH-1:0];
+         tee        <= 0;
       end else
 
       // See note [1] at the end of this file.
@@ -348,6 +352,7 @@ module FemtoRV32(
               rs2 <= registerFile[mem_rdata[24:20]];
               instr <= mem_rdata[31:2]; // Bits 0 and 1 are ignored (see
               state <= EXECUTE;         // also the declaration of instr).
+              tee <= (mem_rdata == 32'h0000007b) ? 1 : ((mem_rdata == 32'h0000007f) ? 0 : tee);
            end
         end
 
@@ -355,7 +360,7 @@ module FemtoRV32(
            PC <= isJALR          ? {aluPlus[ADDR_WIDTH-1:1],1'b0} :
                  jumpToPCplusImm ? PCplusImm :
                  PCplus4;
-	   state <= needToWait ? WAIT_ALU_OR_MEM : FETCH_INSTR;
+	   state <= isTEE ? FETCH_INSTR : (needToWait ? WAIT_ALU_OR_MEM : FETCH_INSTR);
         end
 
         state[WAIT_ALU_OR_MEM_bit]: begin
